// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YoutubeBlog.Data.Context;

#nullable disable

namespace YoutubeBlog.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.About", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubContent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Abouts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e008e90-80f5-48e6-bc1b-f5a49f20694a"),
                            Content = "Header",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1590),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1581),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1580),
                            Name = "about",
                            Name2 = "Header",
                            SecName = "w:>].:YE(#1};I<t#",
                            SubContent = "Header"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AboutImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AboutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.ToTable("AboutImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("28a65ff3-4802-4eb3-be6b-22f008947dd4"),
                            AboutId = new Guid("3e008e90-80f5-48e6-bc1b-f5a49f20694a"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1456),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1458),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1457),
                            SecName = "F?YHvp<kUk'"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e"),
                            ConcurrencyStamp = "74616f15-53cd-4f3c-8f03-0d7828972914",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4"),
                            ConcurrencyStamp = "e801a9ea-d669-44a0-b8ed-423ac570ff30",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("edf6c246-41d8-475f-8d92-41dddac3aefb"),
                            ConcurrencyStamp = "0d21436d-4a92-4614-aa91-325f4ae5925f",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89fdaac9-9c94-47f6-bc5e-67b2fa2c85c4",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Batuhan",
                            LastName = "Ulukan",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBboj3rLKekoHcj3KyJv0Hkc69JP82oMRRMRSKo3zO5rH0+0qKqD/x/3+rF2M3fcYw==",
                            PhoneNumber = "+905439999999",
                            PhoneNumberConfirmed = true,
                            SecName = "BULU45",
                            SecurityStamp = "9c5c90e7-e47a-4d58-b9c1-35e186b90e3a",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17a8b33c-bee4-40c0-8616-c0ed3e4afa18",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOnPKFcdTiFwaooC8aqRgIrsnUTFjPAqkbI3FL0MNeQWgkOCx7bUDXdIPsz+GG0BGA==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = false,
                            SecName = "ADSR45",
                            SecurityStamp = "42fb7839-eb8b-442f-b109-99a8dddf5e09",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            RoleId = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e")
                        },
                        new
                        {
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            RoleId = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4")
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSliderIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abcde123-1234-5678-90ab-cdef12345678"),
                            CategoryId = new Guid("4c569a9a-5f41-478f-9d17-69ac5b02ae0b"),
                            Content = "...",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1971),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1962),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1961),
                            SecName = "X:jaB(-Msq3",
                            Slug = "asp.net-core-deneme-makalesi-1",
                            Title = "Asp.net Core Deneme Makalesi 1",
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            ViewCount = 15
                        },
                        new
                        {
                            Id = new Guid("bcdef234-2345-6789-01bc-def234567890"),
                            CategoryId = new Guid("d23e4f79-9600-4b5e-b3e9-756cdcacd2b1"),
                            Content = "...",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1986),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1980),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1980),
                            SecName = "S(EY|?JXX5J;gj8CVd",
                            Slug = "vısual-studıo-deneme-makalesi-1",
                            Title = "Visual Studio Deneme Makalesi 1",
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            ViewCount = 15
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.ArticleImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ea36edc-b517-4535-837a-0a77bbc445fc"),
                            ArticleId = new Guid("abcde123-1234-5678-90ab-cdef12345678"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1706),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1707),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1706),
                            SecName = "UB<t<U9Wkk{-eup"
                        },
                        new
                        {
                            Id = new Guid("41f987e0-6d31-459b-ac89-5517985419f1"),
                            ArticleId = new Guid("bcdef234-2345-6789-01bc-def234567890"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1718),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1719),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1719),
                            SecName = "hJlu81}&az@Lg6.#Z"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.ArticleVisitor", b =>
                {
                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "VisitorId");

                    b.HasIndex("VisitorId");

                    b.ToTable("ArticleVisitors");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AttachmentRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("AttachmentRecords");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c569a9a-5f41-478f-9d17-69ac5b02ae0b"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3187),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3171),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3170),
                            Name = "ASP.NET Core",
                            SecName = "V!v59kN",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("d23e4f79-9600-4b5e-b3e9-756cdcacd2b1"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3196),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3191),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3190),
                            Name = "Visual Studio 2022",
                            SecName = "Z)=WY[%3.k4Y",
                            Type = 0
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c569a9a-5f41-478f-9d17-69ac5b02ae0b"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3499),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3489),
                            IsActive = false,
                            IsDeleted = false,
                            Link = "KARMOD",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3488),
                            Name = "KARMOD",
                            SecName = "DKP9t'W4n=T-^{bYZV2b"
                        },
                        new
                        {
                            Id = new Guid("d23e4f79-9600-4b5e-b3e9-756cdcacd2b1"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3510),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3505),
                            IsActive = false,
                            IsDeleted = false,
                            Link = "DIA",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3505),
                            Name = "DIA",
                            SecName = "H$$V21KB"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.ClientImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db14c073-011c-4a21-947c-cea0ea1c31dd"),
                            ClientId = new Guid("4c569a9a-5f41-478f-9d17-69ac5b02ae0b"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3313),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3314),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3314),
                            SecName = "9HWSm!WmlxpF!"
                        },
                        new
                        {
                            Id = new Guid("98cfdfb1-08e3-4861-9d2b-de04bfd6c1a2"),
                            ClientId = new Guid("d23e4f79-9600-4b5e-b3e9-756cdcacd2b1"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3322),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3323),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3323),
                            SecName = "1Q>QiBt;OIu'ngNea>u"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfırm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Duty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMaın")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Duties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c569a9a-5f41-478f-9d17-69ac5b02ae0b"),
                            Content = "....",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3620),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3613),
                            Icon = "eye",
                            IsActive = false,
                            IsDeleted = false,
                            IsMaın = true,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3612),
                            Name = "KARMOD",
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c")
                        },
                        new
                        {
                            Id = new Guid("d23e4f79-9600-4b5e-b3e9-756cdcacd2b1"),
                            Content = "....",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3627),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3623),
                            Icon = "screen",
                            IsActive = false,
                            IsDeleted = false,
                            IsMaın = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(3622),
                            Name = "DIA",
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c")
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Fact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fact");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe50fefb-8edb-4b5f-9e70-dcd4aec46a70"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2550),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2530),
                            Icon = "leaf",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2529),
                            Name = "Completed Projects",
                            SecName = "_|bE&<m$R=^M|jC(}:Z)",
                            Value = "125"
                        },
                        new
                        {
                            Id = new Guid("db3f7d1d-ec14-4d06-aea8-2a69ffe9ba6c"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2562),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2553),
                            Icon = "users",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2553),
                            Name = "Satisfied Customers",
                            SecName = "yCmCUZC;c[xoej94HU",
                            Value = "150"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Headquarter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Choosen")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Headquarters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c569a9a-5f41-478f-9d17-69ac5b02ae0b"),
                            Address = "SAMSUN",
                            AddressLink = "SAMSUN",
                            Choosen = true,
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2803),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2794),
                            Email = "batuhanulukan@mail.com",
                            IsActive = false,
                            IsDeleted = false,
                            Location = "41.087770, 29.089148",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2793),
                            Name = "ASP.NET Core",
                            PhoneNumber = "+905976543210",
                            SecName = "LH3?$5@,t|(#$KXx7XV"
                        },
                        new
                        {
                            Id = new Guid("d23e4f79-9600-4b5e-b3e9-756cdcacd2b1"),
                            Address = "İSTANBUL",
                            AddressLink = "İSTANBUL",
                            Choosen = false,
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2811),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2807),
                            Email = "batuhanulukan@mail.com",
                            IsActive = false,
                            IsDeleted = false,
                            Location = "41.112996, 29.021128",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2806),
                            Name = "Visual Studio 2022",
                            PhoneNumber = "+905976543210",
                            SecName = "q&m$DtH5gm"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Logo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abcde123-1234-5678-90ab-cdef12345679"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3160),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3153),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3152),
                            SecName = "57P>4|rv3g&X",
                            Slug = "asp.net-core-deneme-makalesi-1",
                            Title = "Header"
                        },
                        new
                        {
                            Id = new Guid("bcdef234-2345-6789-01bc-def234567899"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3169),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3164),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3164),
                            SecName = "Y9E3)q<cNqfiI9|od",
                            Slug = "vısual-studıo-deneme-makalesi-1",
                            Title = "Footer"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.LogoImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LogoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LogoId");

                    b.ToTable("LogoImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cd7133c0-790b-4eeb-9fda-61d6e6655206"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3042),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3043),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            LogoId = new Guid("abcde123-1234-5678-90ab-cdef12345679"),
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3043),
                            SecName = "O?qt<T!>Q+%>jlt{u"
                        },
                        new
                        {
                            Id = new Guid("b516c9ef-c115-4ffe-b3ed-6d140616e79c"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3050),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3051),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            LogoId = new Guid("bcdef234-2345-6789-01bc-def234567899"),
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3050),
                            SecName = "1,^9$+8"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInbox")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSended")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.PageSeo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Page")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PageSeos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c8cea58-68db-4aa7-a54e-913ab047622c"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3279),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3273),
                            Description = "Contact",
                            IsActive = false,
                            IsDeleted = false,
                            Keywords = "Contact",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3272),
                            Page = "Contact",
                            SecName = "![@j=dds",
                            Title = "Contact"
                        },
                        new
                        {
                            Id = new Guid("0ecc0342-25cf-4f53-b64c-788eb22d832a"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3291),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3285),
                            Description = "Home",
                            IsActive = false,
                            IsDeleted = false,
                            Keywords = "Home",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3285),
                            Page = "Home",
                            SecName = "(S4wdh<Zs",
                            Title = "Home"
                        },
                        new
                        {
                            Id = new Guid("dd40a305-995b-48ca-a7f8-133910fb72cb"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3297),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3293),
                            Description = "Portfolio",
                            IsActive = false,
                            IsDeleted = false,
                            Keywords = "Portfolio",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3292),
                            Page = "Portfolio",
                            SecName = "vM'g;n[}0dL",
                            Title = "Portfolio"
                        },
                        new
                        {
                            Id = new Guid("a501a204-6f7b-45a4-8fb8-969cd86e8791"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3303),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3299),
                            Description = "Base",
                            IsActive = false,
                            IsDeleted = false,
                            Keywords = "Base",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3299),
                            Page = "Base",
                            SecName = "q_<$sbu}^1&PU",
                            Title = "Base"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Portfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Portfolios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abcde123-1234-5678-90ab-cdef12345678"),
                            CategoryId = new Guid("4c569a9a-5f41-478f-9d17-69ac5b02ae0b"),
                            Content = "...",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(4444),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(4436),
                            IsActive = false,
                            IsDeleted = false,
                            Link = "www.google.com",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(4436),
                            SecName = "JHw_|uOXms{{tjS",
                            Slug = "asp.net-core-deneme-makalesi-1",
                            Title = "Asp.net Core Deneme Makalesi 1",
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            ViewCount = 15
                        },
                        new
                        {
                            Id = new Guid("bcdef234-2345-6789-01bc-def234567890"),
                            CategoryId = new Guid("d23e4f79-9600-4b5e-b3e9-756cdcacd2b1"),
                            Content = "...",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(4455),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(4451),
                            IsActive = false,
                            IsDeleted = false,
                            Link = "www.google.com",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(4450),
                            SecName = "9+c9!ce,vrZV",
                            Slug = "vısual-studıo-deneme-makalesi-1",
                            Title = "Visual Studio Deneme Makalesi 1",
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            ViewCount = 15
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.PortfolioImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("PortfolioImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54cb0f00-8c5c-4887-bcaf-0770f4df90d1"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3406),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3399),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3399),
                            PortfolioId = new Guid("abcde123-1234-5678-90ab-cdef12345678"),
                            SecName = "Z5%pH((cQL6"
                        },
                        new
                        {
                            Id = new Guid("7931812c-1322-418c-a750-c90c84bab34f"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3465),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3461),
                            FileName = "images/vstest",
                            FileType = "png",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(3460),
                            PortfolioId = new Guid("bcdef234-2345-6789-01bc-def234567890"),
                            SecName = "OT|1ji-p"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.PortfolioVisitor", b =>
                {
                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("PortfolioId", "VisitorId");

                    b.HasIndex("VisitorId");

                    b.ToTable("PortfolioVisitors");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Slider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubContent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sliders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35a6ff13-92f5-4d82-b69d-77876edb1d57"),
                            Content = "DIA",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(506),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(492),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(491),
                            Name = "KARMOD",
                            SecName = ".ITI5<'f3@A{{T",
                            SubContent = "DIA"
                        },
                        new
                        {
                            Id = new Guid("9653e768-1ea1-4f17-b9bf-04eac0bc88c2"),
                            Content = "DIA",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(513),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(508),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(508),
                            Name = "DIA",
                            SecName = "0%S?,<^RdgsO",
                            SubContent = "DIA"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.SliderImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SliderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SliderId");

                    b.ToTable("SliderImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92bb0abb-2ae2-445d-bafe-9a77ff23a468"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(350),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(353),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(353),
                            SecName = "!CmMV6)f6j-R#V",
                            SliderId = new Guid("35a6ff13-92f5-4d82-b69d-77876edb1d57")
                        },
                        new
                        {
                            Id = new Guid("c4dd2f7e-76d9-4576-a75c-a54050dae9b1"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(375),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(377),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(376),
                            SecName = "gI!mkvIL",
                            SliderId = new Guid("9653e768-1ea1-4f17-b9bf-04eac0bc88c2")
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.SmtpSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IMAPPort")
                        .HasColumnType("int");

                    b.Property<string>("IncomingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OutgoingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SMTPPort")
                        .HasColumnType("int");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SmtpSetting");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f34015ec-47b5-4b07-94eb-51c6863b2d38"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1127),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1139),
                            IMAPPort = 993,
                            IncomingServer = "mail.batuhanulukan.com.tr",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 462, DateTimeKind.Local).AddTicks(1138),
                            OutgoingServer = "mail.batuhanulukan.com.tr",
                            Password = "B5x8d2u~9",
                            SMTPPort = 465,
                            SecName = "I!DgSp&bxHKzc#aH}w",
                            ServerIP = "77.245.159.27",
                            SmtpName = "SMTP",
                            Username = "info@batuhanulukan.com.tr"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Social", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMaın")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Socials");

                    b.HasData(
                        new
                        {
                            Id = new Guid("369724cb-2a49-4c9d-9473-0727b2f31865"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(625),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(619),
                            Icon = "facebook",
                            IsActive = false,
                            IsDeleted = false,
                            IsMaın = false,
                            Link = "https://www.facebook.com",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(618),
                            Name = "Facebook",
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c")
                        },
                        new
                        {
                            Id = new Guid("257e1430-dc2b-4aa5-bca0-e68faaa3003b"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(637),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(629),
                            Icon = "instagram",
                            IsActive = false,
                            IsDeleted = false,
                            IsMaın = true,
                            Link = "https://www.instagram.com",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 464, DateTimeKind.Local).AddTicks(629),
                            Name = "Instagram",
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427")
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f71f4b9a-aa60-461d-b398-de31001bf214"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2925),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2920),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2919),
                            SecName = "!^oG.y>n-%3sQM",
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c")
                        },
                        new
                        {
                            Id = new Guid("d16a6ec7-8c50-4ab0-89a5-02b9a551f0fa"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2939),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2933),
                            FileName = "images/vstest",
                            FileType = "png",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 2, 3, 13, 54, 58, 463, DateTimeKind.Local).AddTicks(2933),
                            SecName = "+LoWSZguENX!?OA=+",
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427")
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AboutImage", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.About", "About")
                        .WithMany("AboutImages")
                        .HasForeignKey("AboutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("About");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserClaim", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserLogin", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserRole", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserToken", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Article", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.ArticleImage", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Article", "Article")
                        .WithMany("ArticleImages")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.ArticleVisitor", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Article", "Article")
                        .WithMany("ArticleVisitors")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoutubeBlog.Entity.Entities.Visitor", "Visitor")
                        .WithMany("ArticleVisitors")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AttachmentRecord", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Message", null)
                        .WithMany("AttachmentRecords")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.ClientImage", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Client", "Clients")
                        .WithMany("ClientImages")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Comment", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Duty", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", "User")
                        .WithMany("Duties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.LogoImage", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Logo", "Logo")
                        .WithMany("LogoImages")
                        .HasForeignKey("LogoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logo");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Portfolio", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.PortfolioImage", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Portfolio", "Portfolio")
                        .WithMany("PortfolioImages")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.PortfolioVisitor", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Portfolio", "Portfolio")
                        .WithMany("PortfolioVisitors")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoutubeBlog.Entity.Entities.Visitor", "Visitor")
                        .WithMany("PortfolioVisitors")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.SliderImage", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Slider", "Slider")
                        .WithMany("SliderImages")
                        .HasForeignKey("SliderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slider");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Social", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", "User")
                        .WithMany("Socials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.UserImage", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", "User")
                        .WithMany("UserImagess")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.About", b =>
                {
                    b.Navigation("AboutImages");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUser", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Comments");

                    b.Navigation("Duties");

                    b.Navigation("Socials");

                    b.Navigation("UserImagess");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Article", b =>
                {
                    b.Navigation("ArticleImages");

                    b.Navigation("ArticleVisitors");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Client", b =>
                {
                    b.Navigation("ClientImages");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Logo", b =>
                {
                    b.Navigation("LogoImages");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Message", b =>
                {
                    b.Navigation("AttachmentRecords");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Portfolio", b =>
                {
                    b.Navigation("PortfolioImages");

                    b.Navigation("PortfolioVisitors");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Slider", b =>
                {
                    b.Navigation("SliderImages");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Visitor", b =>
                {
                    b.Navigation("ArticleVisitors");

                    b.Navigation("PortfolioVisitors");
                });
#pragma warning restore 612, 618
        }
    }
}
