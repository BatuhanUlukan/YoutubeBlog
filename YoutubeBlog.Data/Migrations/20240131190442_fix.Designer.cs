// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YoutubeBlog.Data.Context;

#nullable disable

namespace YoutubeBlog.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240131190442_fix")]
    partial class fix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.About", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubContent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Abouts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e008e90-80f5-48e6-bc1b-f5a49f20694a"),
                            Content = "Header",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(2838),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(2828),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(2828),
                            Name = "about",
                            Name2 = "Header",
                            SecName = "r!weUj|jq6,N,=",
                            SubContent = "Header"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AboutImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AboutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.ToTable("AboutImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("31f7ad92-c656-488e-919e-528becc52048"),
                            AboutId = new Guid("3e008e90-80f5-48e6-bc1b-f5a49f20694a"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(2679),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(2680),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(2679),
                            SecName = "0p03d"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e"),
                            ConcurrencyStamp = "b759d8a4-fa79-42c3-8301-5f3b3ebc9d39",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4"),
                            ConcurrencyStamp = "2b68f4b5-02b8-423c-b8a5-a01b003c873e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("edf6c246-41d8-475f-8d92-41dddac3aefb"),
                            ConcurrencyStamp = "8d5d7a54-97dd-4fb8-9cb2-688174658925",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39483e94-e7d0-43ed-84f7-98310dd2ebac",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Batuhan",
                            LastName = "Ulukan",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFcEBm7ySe9y1StQpr2siK2KosQLJ4EViLmqcOlmMXrHnFdPawk42aLAUwuqfVw45w==",
                            PhoneNumber = "+905439999999",
                            PhoneNumberConfirmed = true,
                            SecName = "BULU45",
                            SecurityStamp = "a4d7e2f4-a039-4e03-82c7-f77f3dbfbfa8",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca5a8fcf-7394-4fd8-a020-785684f2a7e1",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAuUHQvm3QYVHKqMWaC6nbrYzn4Msy/3O5PP7iIYrOCFtTYQjdjLPxFrZR5HxyJ5zg==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = false,
                            SecName = "ADSR45",
                            SecurityStamp = "e6d57430-0761-4c2d-8426-c7d2b2455f7d",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            RoleId = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e")
                        },
                        new
                        {
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            RoleId = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4")
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSliderIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abcde123-1234-5678-90ab-cdef12345678"),
                            CategoryId = new Guid("4c569a9a-5f41-478f-9d17-69ac5b02ae0b"),
                            Content = "...",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(3138),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(3131),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(3131),
                            SecName = "<Mt&n?1BAT+4",
                            Slug = "asp.net-core-deneme-makalesi-1",
                            Title = "Asp.net Core Deneme Makalesi 1",
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            ViewCount = 15
                        },
                        new
                        {
                            Id = new Guid("bcdef234-2345-6789-01bc-def234567890"),
                            CategoryId = new Guid("d23e4f79-9600-4b5e-b3e9-756cdcacd2b1"),
                            Content = "...",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(3152),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(3143),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(3143),
                            SecName = "k1M-__-CW*W4<$d",
                            Slug = "vısual-studıo-deneme-makalesi-1",
                            Title = "Visual Studio Deneme Makalesi 1",
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            ViewCount = 15
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.ArticleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ArticleCategories");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.ArticleImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2a2c466-f8c1-4dbf-ba1a-2662819f03e6"),
                            ArticleId = new Guid("abcde123-1234-5678-90ab-cdef12345678"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(2996),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(2997),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(2996),
                            SecName = ".UCo7Q>ffggxIHMpl!,9"
                        },
                        new
                        {
                            Id = new Guid("0b30156f-a7ac-4070-aea0-fcdadfb88cca"),
                            ArticleId = new Guid("bcdef234-2345-6789-01bc-def234567890"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(3006),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(3008),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(3007),
                            SecName = "ZLt{7bI!srWI3"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.ArticleVisitor", b =>
                {
                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "VisitorId");

                    b.HasIndex("VisitorId");

                    b.ToTable("ArticleVisitors");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AttachmentRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("AttachmentRecords");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c569a9a-5f41-478f-9d17-69ac5b02ae0b"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4596),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4569),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4569),
                            Name = "ASP.NET Core",
                            SecName = "w&O.nCGvu^-.:qG[ZqJ{",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("d23e4f79-9600-4b5e-b3e9-756cdcacd2b1"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4605),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4599),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4599),
                            Name = "Visual Studio 2022",
                            SecName = "Rc@Wi#RzkS3D",
                            Type = 0
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c569a9a-5f41-478f-9d17-69ac5b02ae0b"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4934),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4927),
                            IsActive = false,
                            IsDeleted = false,
                            Link = "KARMOD",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4926),
                            Name = "KARMOD",
                            SecName = "!%P8+K"
                        },
                        new
                        {
                            Id = new Guid("d23e4f79-9600-4b5e-b3e9-756cdcacd2b1"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4942),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4937),
                            IsActive = false,
                            IsDeleted = false,
                            Link = "DIA",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4937),
                            Name = "DIA",
                            SecName = "*|;Q7r?v}=7;"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.ClientImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("557b1f83-6903-452b-b644-3b5bd01a6c7a"),
                            ClientId = new Guid("4c569a9a-5f41-478f-9d17-69ac5b02ae0b"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4796),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4797),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4797),
                            SecName = "|aP]&x?sV{Z9NU"
                        },
                        new
                        {
                            Id = new Guid("ca3b89db-cab0-4339-93b3-b25f9ba1230c"),
                            ClientId = new Guid("d23e4f79-9600-4b5e-b3e9-756cdcacd2b1"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4806),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4807),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(4806),
                            SecName = "yOIB1vB^"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfırm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Duty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMaın")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Duties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c569a9a-5f41-478f-9d17-69ac5b02ae0b"),
                            Content = "....",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(5081),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(5072),
                            Icon = "eye",
                            IsActive = false,
                            IsDeleted = false,
                            IsMaın = true,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(5072),
                            Name = "KARMOD",
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c")
                        },
                        new
                        {
                            Id = new Guid("d23e4f79-9600-4b5e-b3e9-756cdcacd2b1"),
                            Content = "....",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(5090),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(5084),
                            Icon = "screen",
                            IsActive = false,
                            IsDeleted = false,
                            IsMaın = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(5084),
                            Name = "DIA",
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c")
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Fact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fact");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe50fefb-8edb-4b5f-9e70-dcd4aec46a70"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(4687),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(4592),
                            Icon = "leaf",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(4591),
                            Name = "Completed Projects",
                            SecName = "(lP>r",
                            Value = "125"
                        },
                        new
                        {
                            Id = new Guid("db3f7d1d-ec14-4d06-aea8-2a69ffe9ba6c"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(4698),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(4691),
                            Icon = "users",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(4691),
                            Name = "Satisfied Customers",
                            SecName = "Hkzlah'k*m<V",
                            Value = "150"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Headquarter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Choosen")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Headquarters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c569a9a-5f41-478f-9d17-69ac5b02ae0b"),
                            Address = "SAMSUN",
                            AddressLink = "SAMSUN",
                            Choosen = true,
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(4889),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(4880),
                            Email = "batuhanulukan@mail.com",
                            IsActive = false,
                            IsDeleted = false,
                            Location = "41.087770, 29.089148",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(4879),
                            Name = "ASP.NET Core",
                            PhoneNumber = "+905976543210",
                            SecName = "=G<C?+;XG:fN#<MgpwBH"
                        },
                        new
                        {
                            Id = new Guid("d23e4f79-9600-4b5e-b3e9-756cdcacd2b1"),
                            Address = "İSTANBUL",
                            AddressLink = "İSTANBUL",
                            Choosen = false,
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(4898),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(4893),
                            Email = "batuhanulukan@mail.com",
                            IsActive = false,
                            IsDeleted = false,
                            Location = "41.112996, 29.021128",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(4893),
                            Name = "Visual Studio 2022",
                            PhoneNumber = "+905976543210",
                            SecName = "}$&6EH'c7L:"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Logo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abcde123-1234-5678-90ab-cdef12345679"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5331),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5325),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5324),
                            SecName = "'WLGnQH5T",
                            Slug = "asp.net-core-deneme-makalesi-1",
                            Title = "Header"
                        },
                        new
                        {
                            Id = new Guid("bcdef234-2345-6789-01bc-def234567899"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5340),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5335),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5334),
                            SecName = "5;-z.BtxG[(}AniB",
                            Slug = "vısual-studıo-deneme-makalesi-1",
                            Title = "Footer"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.LogoImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LogoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LogoId");

                    b.ToTable("LogoImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04888be2-8f63-45b5-b580-83726665b220"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5153),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5154),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            LogoId = new Guid("abcde123-1234-5678-90ab-cdef12345679"),
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5154),
                            SecName = "VOmKc["
                        },
                        new
                        {
                            Id = new Guid("c3c151d5-15a2-4db6-ab34-37a46ed4e7f0"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5161),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5162),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            LogoId = new Guid("bcdef234-2345-6789-01bc-def234567899"),
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5161),
                            SecName = "9MtddRGim-L3F0}"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInbox")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSended")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.PageSeo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Page")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PageSeos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c8cea58-68db-4aa7-a54e-913ab047622c"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5466),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5458),
                            Description = "Contact",
                            IsActive = false,
                            IsDeleted = false,
                            Keywords = "Contact",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5458),
                            Page = "Contact",
                            SecName = "S)krmf3#jQ-jxC?",
                            Title = "Contact"
                        },
                        new
                        {
                            Id = new Guid("0ecc0342-25cf-4f53-b64c-788eb22d832a"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5476),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5470),
                            Description = "Home",
                            IsActive = false,
                            IsDeleted = false,
                            Keywords = "Home",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5470),
                            Page = "Home",
                            SecName = "c(a6=:lsm)rHOMH",
                            Title = "Home"
                        },
                        new
                        {
                            Id = new Guid("dd40a305-995b-48ca-a7f8-133910fb72cb"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5485),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5481),
                            Description = "Portfolio",
                            IsActive = false,
                            IsDeleted = false,
                            Keywords = "Portfolio",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5480),
                            Page = "Portfolio",
                            SecName = "Wy<?Ox[8o!!<",
                            Title = "Portfolio"
                        },
                        new
                        {
                            Id = new Guid("a501a204-6f7b-45a4-8fb8-969cd86e8791"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5493),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5488),
                            Description = "Base",
                            IsActive = false,
                            IsDeleted = false,
                            Keywords = "Base",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5487),
                            Page = "Base",
                            SecName = "Uw.c#n@T-(#m!st4",
                            Title = "Base"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Portfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Portfolios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abcde123-1234-5678-90ab-cdef12345678"),
                            CategoryId = new Guid("4c569a9a-5f41-478f-9d17-69ac5b02ae0b"),
                            Content = "...",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(6860),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(6850),
                            IsActive = false,
                            IsDeleted = false,
                            Link = "www.google.com",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(6850),
                            SecName = "&]KGP]$'#+%j&F2",
                            Slug = "asp.net-core-deneme-makalesi-1",
                            Title = "Asp.net Core Deneme Makalesi 1",
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            ViewCount = 15
                        },
                        new
                        {
                            Id = new Guid("bcdef234-2345-6789-01bc-def234567890"),
                            CategoryId = new Guid("d23e4f79-9600-4b5e-b3e9-756cdcacd2b1"),
                            Content = "...",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(6868),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(6863),
                            IsActive = false,
                            IsDeleted = false,
                            Link = "www.google.com",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(6863),
                            SecName = "F]7_?-qg##o",
                            Slug = "vısual-studıo-deneme-makalesi-1",
                            Title = "Visual Studio Deneme Makalesi 1",
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            ViewCount = 15
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.PortfolioImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("PortfolioImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dab315f2-8bfc-479e-91d6-fdc33e4ef077"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5695),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5689),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5689),
                            PortfolioId = new Guid("abcde123-1234-5678-90ab-cdef12345678"),
                            SecName = "*}sN,xg"
                        },
                        new
                        {
                            Id = new Guid("85a73ba6-3180-42db-ba2c-081c11bce3a3"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5702),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5698),
                            FileName = "images/vstest",
                            FileType = "png",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5698),
                            PortfolioId = new Guid("bcdef234-2345-6789-01bc-def234567890"),
                            SecName = "y[PLEEM;@"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.PortfolioVisitor", b =>
                {
                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("PortfolioId", "VisitorId");

                    b.HasIndex("VisitorId");

                    b.ToTable("PortfolioVisitors");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Slider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubContent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sliders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35a6ff13-92f5-4d82-b69d-77876edb1d57"),
                            Content = "DIA",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3166),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3156),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3155),
                            Name = "KARMOD",
                            SecName = "z'F;@D-8lFV",
                            SubContent = "DIA"
                        },
                        new
                        {
                            Id = new Guid("9653e768-1ea1-4f17-b9bf-04eac0bc88c2"),
                            Content = "DIA",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3190),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3185),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3168),
                            Name = "DIA",
                            SecName = "Ju<>?feF[n<t]^1;q+k",
                            SubContent = "DIA"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.SliderImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SliderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SliderId");

                    b.ToTable("SliderImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32e85ca2-0ce9-4ee0-89f9-d23bbab48a2e"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3010),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3014),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3013),
                            SecName = "V'Dd!FLX2T>=d;uoy$",
                            SliderId = new Guid("35a6ff13-92f5-4d82-b69d-77876edb1d57")
                        },
                        new
                        {
                            Id = new Guid("c44f864d-d39d-4645-ade1-6f911f7f3359"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3034),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3036),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3035),
                            SecName = "WA,pUYqp306o_]zqZ4t",
                            SliderId = new Guid("9653e768-1ea1-4f17-b9bf-04eac0bc88c2")
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.SmtpSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IMAPPort")
                        .HasColumnType("int");

                    b.Property<string>("IncomingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OutgoingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SMTPPort")
                        .HasColumnType("int");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SmtpSetting");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98c70e67-b1b2-4ffa-8174-2f67367fd6cc"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(2329),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(2344),
                            IMAPPort = 993,
                            IncomingServer = "mail.batuhanulukan.com.tr",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 856, DateTimeKind.Local).AddTicks(2340),
                            OutgoingServer = "mail.batuhanulukan.com.tr",
                            Password = "B5x8d2u~9",
                            SMTPPort = 465,
                            SecName = "KfRHgi4h+^s.f$o^",
                            ServerIP = "77.245.159.27",
                            SmtpName = "SMTP",
                            Username = "info@batuhanulukan.com.tr"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Social", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMaın")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Socials");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e877ffac-b184-4bdd-a2a5-9100b7fe1202"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3307),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3300),
                            Icon = "facebook",
                            IsActive = false,
                            IsDeleted = false,
                            IsMaın = false,
                            Link = "https://www.facebook.com",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3299),
                            Name = "Facebook",
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c")
                        },
                        new
                        {
                            Id = new Guid("7334e5c7-2925-4a78-b4d5-a868546b7c73"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3352),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3347),
                            Icon = "instagram",
                            IsActive = false,
                            IsDeleted = false,
                            IsMaın = true,
                            Link = "https://www.instagram.com",
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 858, DateTimeKind.Local).AddTicks(3347),
                            Name = "Instagram",
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427")
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f71f4b9a-aa60-461d-b398-de31001bf214"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5023),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5017),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5017),
                            SecName = "^NM[",
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c")
                        },
                        new
                        {
                            Id = new Guid("d16a6ec7-8c50-4ab0-89a5-02b9a551f0fa"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5030),
                            DeletedBy = "Undefined",
                            DeletedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5025),
                            FileName = "images/vstest",
                            FileType = "png",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "Undefined",
                            ModifiedDate = new DateTime(2024, 1, 31, 22, 4, 41, 857, DateTimeKind.Local).AddTicks(5025),
                            SecName = "T1L56jU}L%",
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427")
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AboutImage", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.About", "About")
                        .WithMany("AboutImages")
                        .HasForeignKey("AboutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("About");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserClaim", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserLogin", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserRole", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUserToken", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Article", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.ArticleCategory", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Article", "Article")
                        .WithMany("ArticleCategories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoutubeBlog.Entity.Entities.Category", "Category")
                        .WithMany("ArticleCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.ArticleImage", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Article", "Article")
                        .WithMany("ArticleImages")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.ArticleVisitor", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Article", "Article")
                        .WithMany("ArticleVisitors")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoutubeBlog.Entity.Entities.Visitor", "Visitor")
                        .WithMany("ArticleVisitors")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AttachmentRecord", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Message", null)
                        .WithMany("AttachmentRecords")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.ClientImage", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Client", "Clients")
                        .WithMany("ClientImages")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Comment", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Duty", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", "User")
                        .WithMany("Duties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.LogoImage", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Logo", "Logo")
                        .WithMany("LogoImages")
                        .HasForeignKey("LogoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logo");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Portfolio", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.PortfolioImage", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Portfolio", "Portfolio")
                        .WithMany("PortfolioImages")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.PortfolioVisitor", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Portfolio", "Portfolio")
                        .WithMany("PortfolioVisitors")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoutubeBlog.Entity.Entities.Visitor", "Visitor")
                        .WithMany("PortfolioVisitors")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.SliderImage", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Slider", "Slider")
                        .WithMany("SliderImages")
                        .HasForeignKey("SliderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slider");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Social", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", "User")
                        .WithMany("Socials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.UserImage", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.AppUser", "User")
                        .WithMany("UserImagess")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.About", b =>
                {
                    b.Navigation("AboutImages");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.AppUser", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Comments");

                    b.Navigation("Duties");

                    b.Navigation("Socials");

                    b.Navigation("UserImagess");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Article", b =>
                {
                    b.Navigation("ArticleCategories");

                    b.Navigation("ArticleImages");

                    b.Navigation("ArticleVisitors");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Category", b =>
                {
                    b.Navigation("ArticleCategories");

                    b.Navigation("Articles");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Client", b =>
                {
                    b.Navigation("ClientImages");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Logo", b =>
                {
                    b.Navigation("LogoImages");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Message", b =>
                {
                    b.Navigation("AttachmentRecords");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Portfolio", b =>
                {
                    b.Navigation("PortfolioImages");

                    b.Navigation("PortfolioVisitors");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Slider", b =>
                {
                    b.Navigation("SliderImages");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Visitor", b =>
                {
                    b.Navigation("ArticleVisitors");

                    b.Navigation("PortfolioVisitors");
                });
#pragma warning restore 612, 618
        }
    }
}
